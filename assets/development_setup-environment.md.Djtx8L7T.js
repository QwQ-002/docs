import{_ as n,I as i,c as l,o as p,ai as h,J as a}from"./chunks/framework.sqtICQw5.js";const E=JSON.parse('{"title":"构建环境","description":"","frontmatter":{},"headers":[],"relativePath":"development/setup-environment.md","filePath":"development/setup-environment.md"}'),o={name:"development/setup-environment.md"};function r(d,s,k,c,g,b){const t=i("NolebaseGitContributors"),e=i("NolebaseGitChangelog");return p(),l("div",null,[s[0]||(s[0]=h(`<h1 id="构建环境" tabindex="-1">构建环境 <a class="header-anchor" href="#构建环境" aria-label="Permalink to “构建环境”">​</a></h1><p>从现在开始，你将从头开始开发一个 QwQNT 框架插件。</p><p>该节内容将会简要介绍如何构建一个插件开发环境。</p><h2 id="使用模板" tabindex="-1">使用模板 <a class="header-anchor" href="#使用模板" aria-label="Permalink to “使用模板”">​</a></h2><p>QwQNT 框架并未提供官方实现的插件模板。</p><p>下列均为社区模板，出现任何问题均与 QwQNT 框架官方无关。</p><h3 id="adproqwq-模板" tabindex="-1">adproqwq 模板 <a class="header-anchor" href="#adproqwq-模板" aria-label="Permalink to “adproqwq 模板”">​</a></h3><p><a href="https://github.com/adproqwq/QwQNT-PluginTemplate-Vite-pnpm/" target="_blank" rel="noreferrer">点击查看</a></p><p>该模板由 <a href="https://github.com/adproqwq/" target="_blank" rel="noreferrer">@adproqwq</a> 提供。</p><p>该模板完全为 Typescript 设计，采用 pnpm + Vite + Oxc 开发链。</p><h3 id="xiyuesaves-模板" tabindex="-1">xiyuesaves 模板 <a class="header-anchor" href="#xiyuesaves-模板" aria-label="Permalink to “xiyuesaves 模板”">​</a></h3><p><a href="https://github.com/xiyuesaves/ts-plugin-template/" target="_blank" rel="noreferrer">点击查看</a></p><p>该模板由 <a href="https://github.com/xiyuesaves/" target="_blank" rel="noreferrer">@xiyuesaves</a> 提供。</p><p>该模板完全为 Typescript 设计，采用 pnpm 作为包管理器。</p><p>该模板可用于开发 QwQNT 框架与 LiteLoaderQQNT 框架通用插件。</p><h2 id="自己构建" tabindex="-1">自己构建 <a class="header-anchor" href="#自己构建" aria-label="Permalink to “自己构建”">​</a></h2><p>我们使用 Typescript 为例。</p><p>我们假设你已经完成了项目的初始化。</p><p>首先，请在 package.json 中添加 QwQNT 框架官方的 schema 。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-57" id="tab-58" checked><label data-title="package.json" for="tab-58">package.json</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$schema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://raw.githubusercontent.com/qwqnt-community/types/main/plugin.schema.json&quot;</span></span></code></pre></div></div></div><p>由于 Electron 项目的特殊性，我们建议你将 tsconfig.json 拆分为两个文件分别对应使用 node 的主进程和使用 web 的 preload 和渲染进程。</p><p>假设你将其拆分为 tsconfig.node.json 和 tsconfig.web.json 。</p><p>请执行下列命令以安装 QwQNT 框架官方核心类型定义库。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-69" id="tab-70" checked><label data-title="npm" for="tab-70">npm</label><input type="radio" name="group-69" id="tab-71"><label data-title="pnpm" for="tab-71">pnpm</label></div><div class="blocks"><div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github:qwqnt-community/types</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github:qwqnt-community/types</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div></div></div><p>然后再修改两个 tsconfig.*.json 文件。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-76" id="tab-77" checked><label data-title="tsconfig.node.json" for="tab-77">tsconfig.node.json</label><input type="radio" name="group-76" id="tab-78"><label data-title="tsconfig.web.json" for="tab-78">tsconfig.web.json</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@qwqnt/types/main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@qwqnt/types/preload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@qwqnt/types/renderer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>在 tsconfig.json 中引入这两个文件：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-83" id="tab-84" checked><label data-title="tsconfig.json" for="tab-84">tsconfig.json</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;references&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./tsconfig.node.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./tsconfig.web.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div></div></div>`,28)),a(t),a(e)])}const y=n(o,[["render",r]]);export{E as __pageData,y as default};
